#!/bin/bash

# ==============================================================================
# CONFIGURATION
# ==============================================================================

# shellcheck disable=SC2034  # Used in sourced files
export CONFIG_DIR="$HOME/.dev-envs"
GLOBAL_CONFIG="$CONFIG_DIR/config.yaml"
PROJECT_CONFIG=".devenv.yaml"

# Language plugins directory (installed by install.sh)
LANGUAGES_DIR="$HOME/.dev-envs/languages"

# Get script directory for sourcing libraries
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source library modules
source "$SCRIPT_DIR/lib/utils.sh"
source "$SCRIPT_DIR/lib/config.sh"
source "$SCRIPT_DIR/lib/vm.sh"
source "$SCRIPT_DIR/lib/containers.sh"
source "$SCRIPT_DIR/lib/templates.sh"
source "$SCRIPT_DIR/lib/languages.sh"
source "$SCRIPT_DIR/lib/security.sh"



# ==============================================================================
# MAIN EXECUTION
# ==============================================================================

# Initialize default values
DOCKERFILE="Dockerfile"
COMMAND="run"
CUSTOM_TAG=""
CUSTOM_NAME=""
AUTO_YES=false
TARGET_PLATFORM=""
CUSTOM_ENV_VARS=()

# Process command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            ;;
        list)
            list_templates
            ;;
        templates)
            case "$2" in
                --help|-h)
                    show_command_help "templates"
                    exit 0
                    ;;
                update)
                    update_templates
                    exit 0
                    ;;
                check)
                    check_template_updates
                    exit 0
                    ;;
                prune)
                    prune_old_templates
                    exit 0
                    ;;
                cleanup)
                    # Handle optional days parameter and --yes flag
                    days="$3"
                    shift 3  # Remove 'templates', 'cleanup', and days
                    while [[ $# -gt 0 ]]; do
                        case $1 in
                            --yes|-y)
                                AUTO_YES=true
                                shift
                                ;;
                            *)
                                echo "‚ùå Error: Unknown flag for 'templates cleanup': $1"
                                exit 1
                                ;;
                        esac
                    done
                    cleanup_unused_templates "$days"
                    exit 0
                    ;;
                stats)
                    show_template_stats
                    exit 0
                    ;;
                *)
                    echo "‚ùå Error: Unknown templates subcommand '$2'"
                    echo "Available: update, check, prune, cleanup, stats"
                    exit 1
                    ;;
            esac
            ;;
        config)
            case "$2" in
                --help|-h)
                    show_command_help "config"
                    exit 0
                    ;;
                *)
                    shift 1  # Remove 'config'
                    # Parse config subcommand and flags
                    subcommand="$1"
                    shift 1
                    while [[ $# -gt 0 ]]; do
                        case $1 in
                            --yes|-y)
                                AUTO_YES=true
                                shift
                                ;;
                            *)
                                echo "‚ùå Error: Unknown flag for 'config' command: $1"
                                exit 1
                                ;;
                        esac
                    done
                    handle_config_command "$subcommand"
                    ;;
            esac
            ;;
        devcontainer)
            case "$2" in
                --help|-h)
                    show_command_help "devcontainer"
                    exit 0
                    ;;
                *)
                    shift 1  # Remove 'devcontainer'
                    # Parse devcontainer subcommand and flags
                    language=""
                    dockerfile_path="./Dockerfile"
                    while [[ $# -gt 0 ]]; do
                        case $1 in
                            --yes|-y)
                                AUTO_YES=true
                                shift
                                ;;
                            -f|--file)
                                dockerfile_path="$2"
                                shift 2
                                ;;
                            -*)
                                echo "‚ùå Error: Unknown flag for 'devcontainer' command: $1"
                                exit 1
                                ;;
                            *)
                                if [[ -z "$language" ]]; then
                                    language="$1"
                                else
                                    echo "‚ùå Error: Multiple language arguments provided: $language and $1"
                                    exit 1
                                fi
                                shift
                                ;;
                        esac
                    done
                    handle_devcontainer_command "$language" "$dockerfile_path"
                    ;;
            esac
            ;;
        new)
            # Parse flags first to handle cases like "dev new --yes"
            init_project=false
            generate_devcontainer=false
            language=""
            shift 1  # Remove 'new'
            
            # Process all arguments
            while [[ $# -gt 0 ]]; do
                case $1 in
                    --help|-h)
                        show_command_help "new"
                        exit 0
                        ;;
                    --init)
                        init_project=true
                        shift
                        ;;
                    --devcontainer)
                        generate_devcontainer=true
                        shift
                        ;;
                    --yes|-y)
                        AUTO_YES=true
                        shift
                        ;;
                    -*)
                        echo "‚ùå Error: Unknown flag for 'new' command: $1"
                        exit 1
                        ;;
                    *)
                        if [[ -z "$language" ]]; then
                            language="$1"
                        else
                            echo "‚ùå Error: Multiple language arguments provided: $language and $1"
                            exit 1
                        fi
                        shift
                        ;;
                esac
            done
            
            # If no language specified, auto-detect
            if [[ -z "$language" ]]; then
                # Try new language system first, fallback to old system
                if [[ -d "$LANGUAGES_DIR" ]]; then
                    detection_result=$(detect_project_type_from_languages "$LANGUAGES_DIR")
                else
                    detection_result=$(detect_project_type)
                fi
                detected_lang=$(echo "$detection_result" | cut -d: -f1)
                detected_version=$(echo "$detection_result" | cut -d: -f2)
                confidence=$(echo "$detection_result" | cut -d: -f3)
                
                if [[ -n "$detected_lang" ]]; then
                    current_arch=$(detect_architecture)
                    suggested_template="$detected_lang"
                    
                    # Add version if detected and available, otherwise find best match
                    if [[ -n "$detected_version" ]]; then
                        # Try exact match first
                        if [[ -f "$TEMPLATES_DIR/Dockerfile-$detected_lang-$detected_version" ]]; then
                            suggested_template="$detected_lang-$detected_version"
                        else
                            # Try major.minor match (e.g., 3.12.0 -> 3.12)
                            major_minor=$(echo "$detected_version" | cut -d. -f1,2)
                            if [[ -f "$TEMPLATES_DIR/Dockerfile-$detected_lang-$major_minor" ]]; then
                                suggested_template="$detected_lang-$major_minor"
                            else
                                # Fall back to latest available
                                latest_template=$(find "$TEMPLATES_DIR" -name "Dockerfile-$detected_lang-*" -type f 2>/dev/null | \
                                    sed "s/.*Dockerfile-$detected_lang-//" | \
                                    sort -V | tail -1)
                                if [[ -n "$latest_template" ]]; then
                                    suggested_template="$detected_lang-$latest_template"
                                fi
                            fi
                        fi
                    else
                        # Find the latest version available locally
                        latest_template=$(find "$TEMPLATES_DIR" -name "Dockerfile-$detected_lang-*" -type f 2>/dev/null | \
                            sed "s/.*Dockerfile-$detected_lang-//" | \
                            sort -V | tail -1)
                        if [[ -n "$latest_template" ]]; then
                            suggested_template="$detected_lang-$latest_template"
                        fi
                    fi
                    
                    echo "üîç Project Detection Results:"
                    echo "   Language: $detected_lang"
                    [[ -n "$detected_version" ]] && echo "   Version: $detected_version"
                    echo "   Architecture: $current_arch"
                    echo "   Confidence: $confidence"
                    echo ""
                    echo "üí° Suggested template: $suggested_template"
                    
                    if [[ "$AUTO_YES" == "true" ]]; then
                        echo "Auto-confirming suggestion (--yes flag set)"
                        create_from_template "$suggested_template" "$init_project" "$TARGET_PLATFORM" "$generate_devcontainer"
                    else
                        echo -n "Use this template? (Y/n): "
                        read -r response
                        if [[ -z "$response" ]] || [[ "$response" =~ ^[Yy]$ ]]; then
                            create_from_template "$suggested_template" "$init_project" "$TARGET_PLATFORM" "$generate_devcontainer"
                        else
                            echo "Template creation cancelled."
                            echo "Use 'dev list' to see available options or 'dev new <language>' to specify manually."
                            exit 0
                        fi
                    fi
                else
                    echo "üîç No project files detected in current directory."
                    echo "Use 'dev new <language>' to create a template manually."
                    echo "Available languages: python, node, golang, rust, java, php, bash"
                    echo "Example: dev new python-3.13 --init"
                    exit 1
                fi
            else
                # Language specified manually
                create_from_template "$language" "$init_project" "$TARGET_PLATFORM" "$generate_devcontainer"
            fi
            ;;

        -f|--file)
            DOCKERFILE="$2"
            shift 2
            ;;
        -t|--tag)
            CUSTOM_TAG="$2"
            shift 2
            ;;
        -n|--name)
            CUSTOM_NAME="$2"
            shift 2
            ;;
        -y|--yes)
            AUTO_YES=true
            shift
            ;;
        --platform)
            TARGET_PLATFORM="$2"
            shift 2
            ;;
        run|build|clean|shell)
            COMMAND="$1"
            shift
            ;;
        help)
            if [[ -n "$2" ]]; then
                show_command_help "$2"
            else
                usage
                echo ""
                echo "Available help topics:"
                echo "  $(basename "$0") help new           # Template creation help"
                echo "  $(basename "$0") help config        # Configuration help"
                echo "  $(basename "$0") help templates     # Template management help"
                echo "  $(basename "$0") help env           # Environment management help"
                echo "  $(basename "$0") arch               # Architecture and platform info"
                echo "  $(basename "$0") troubleshoot       # Troubleshooting guide"
            fi
            exit 0
            ;;
        troubleshoot)
            show_command_help "troubleshoot"
            exit 0
            ;;
        arch|architecture)
            case "$2" in
                --help|-h)
                    show_command_help "arch"
                    exit 0
                    ;;
                *)
                    echo "üíª Architecture Information:"
                    echo "   Host architecture: $(detect_architecture)"
                    echo "   Default platform: linux/$(detect_architecture)"
                    echo ""
                    echo "Supported platforms:"
                    echo "   linux/amd64    - Intel/AMD 64-bit (x86_64)"
                    echo "   linux/arm64    - ARM 64-bit (Apple Silicon, ARM servers)"
                    echo ""
                    echo "Usage:"
                    echo "   $(basename "$0") --platform linux/arm64    # Force ARM64 build"
                    echo "   $(basename "$0") --platform linux/amd64    # Force AMD64 build"
                    echo "   $(basename "$0")                          # Auto-detect (recommended)"
                    exit 0
                    ;;
            esac
            ;;
        security)
            case "$2" in
                --help|-h)
                    echo "Security commands:"
                    echo "  dev security scan          Scan current Dockerfile for security issues"
                    echo "  dev security validate      Validate Dockerfile security best practices"

                    exit 0
                    ;;
                scan)
                    if [[ -f "Dockerfile" ]]; then
                        validate_dockerfile_security "Dockerfile"
                        echo ""
                        scan_image_vulnerabilities "test-image"
                    else
                        echo "‚ùå No Dockerfile found in current directory"
                        exit 1
                    fi
                    exit 0
                    ;;
                validate)
                    if [[ -f "Dockerfile" ]]; then
                        validate_dockerfile_security "Dockerfile"
                    else
                        echo "‚ùå No Dockerfile found in current directory"
                        exit 1
                    fi
                    exit 0
                    ;;


                *)
                    echo "‚ùå Error: Unknown security subcommand '$2'"
                    echo "Available: scan, validate, trivy"
                    exit 1
                    ;;
            esac
            ;;
        env)
            # Pass all remaining arguments to handle_env_command
            shift 1  # Remove 'env'
            handle_env_command "$@"
            exit 0
            ;;
        *)
            echo "‚ùå Error: Unknown option '$1'"
            echo "Available commands: run, shell, build, clean, new, devcontainer, list, config, templates, security, env, help, troubleshoot, arch"
            echo "Use --help for usage information or 'help <command>' for command-specific help."
            exit 1
            ;;
    esac
done

# --- Load Configuration ---
load_config

# --- Validate Requirements ---
if [[ "$COMMAND" != "clean" ]]; then
    if [ ! -f "$DOCKERFILE" ]; then
        echo "‚ùå Error: No Dockerfile found at '$DOCKERFILE'"
        echo ""
        echo "üí° Suggestions:"
        echo "   ‚Ä¢ Create from template: '$(basename "$0") new <language>'"
        echo "   ‚Ä¢ Use different file: '$(basename "$0") -f /path/to/Dockerfile'"
        echo "   ‚Ä¢ See available templates: '$(basename "$0") list'"
        echo "   ‚Ä¢ Get help: '$(basename "$0") help new'"
        exit 1
    fi
fi

# --- Generate Names ---
PROJECT_NAME=$(basename "$(pwd)" | tr '[:upper:]' '[:lower:]')
IMAGE_NAME="${CUSTOM_TAG:-${CONTAINER_PREFIX}-img-${PROJECT_NAME}}"
CONTAINER_NAME="${CUSTOM_NAME:-${CONTAINER_PREFIX}-ctn-${PROJECT_NAME}}"

# --- Main Logic ---
case $COMMAND in
    run|shell)
        prepare_and_run_container "$COMMAND"
        ;;
    build)
        echo "üî® Building container image for '$PROJECT_NAME'..."
        ensure_vm_running
        platform_flag=$(get_platform_flag "$TARGET_PLATFORM")
        build_image "$platform_flag"
        echo "‚úÖ Image '$IMAGE_NAME' built successfully."
        ;;
        
    clean)
        echo "üßπ Cleaning up containers and images for '$PROJECT_NAME'..."
        ensure_vm_running
        cleanup_existing_container
        if orb -m "$VM_NAME" sudo docker images --format '{{.Repository}}' | grep -q "^${IMAGE_NAME}$"; then
            echo "   -> Removing image '$IMAGE_NAME'..."
            orb -m "$VM_NAME" sudo docker rmi "$IMAGE_NAME" >/dev/null 2>&1
        fi
        echo "‚úÖ Cleanup complete."
        ;;
esac