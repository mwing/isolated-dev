#!/bin/bash

# ==============================================================================
# CONFIGURATION
# ==============================================================================

DEFAULT_VM_NAME="dev-vm-docker-host"
TEMPLATES_DIR="$HOME/.dev-envs/templates"
CONFIG_DIR="$HOME/.dev-envs"
GLOBAL_CONFIG="$CONFIG_DIR/config.yaml"
PROJECT_CONFIG=".devenv.yaml"

# Template skeleton directories (installed by install.sh)
SKELETONS_DIR="$CONFIG_DIR/skeletons"
DOCKERFILE_SKELETONS="$SKELETONS_DIR/dockerfiles"
SCAFFOLDING_SKELETONS="$SKELETONS_DIR/scaffolding"

# Get script directory for sourcing libraries
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source library modules
source "$SCRIPT_DIR/lib/utils.sh"
source "$SCRIPT_DIR/lib/config.sh"
source "$SCRIPT_DIR/lib/vm.sh"
source "$SCRIPT_DIR/lib/containers.sh"
source "$SCRIPT_DIR/lib/templates.sh"

# ==============================================================================
# TEMPLATE CLEANUP FUNCTIONS (remaining functions not moved to templates.sh)
# ==============================================================================

function prune_old_templates() {
    echo "🧹 Analyzing template usage and removing old versions..."
    echo ""
    
    local templates_dir="$TEMPLATES_DIR"
    local usage_file="$HOME/.dev-envs/template_usage.log"
    local current_date=$(date +%s)
    local days_threshold=30
    local threshold_date=$((current_date - days_threshold * 86400))
    
    # Create usage tracking file if it doesn't exist
    if [[ ! -f "$usage_file" ]]; then
        touch "$usage_file"
        echo "📝 Created template usage tracking file"
    fi
    
    # Find the most recently created template for each language (these are "latest")
    local temp_file=$(mktemp)
    
    for template_file in "$templates_dir"/Dockerfile-*; do
        [[ -f "$template_file" ]] || continue
        
        local template_name=$(basename "$template_file" | sed 's/Dockerfile-//')
        local language=$(echo "$template_name" | sed 's/-.*$//')
        local file_time=$(stat -f %B "$template_file" 2>/dev/null || stat -c %Y "$template_file" 2>/dev/null || echo 0)
        
        echo "$language:$template_name:$file_time" >> "$temp_file"
    done
    
    echo "🔒 Protected templates (latest per language):"
    # Find latest template for each language
    for language in $(cut -d: -f1 "$temp_file" | sort -u); do
        local latest=$(grep "^$language:" "$temp_file" | sort -t: -k3 -nr | head -1 | cut -d: -f2)
        echo "   ✅ $latest (latest $language)"
    done
    echo ""
    
    local removed_count=0
    local total_templates=0
    local kept_count=0
    
    # Analyze each template
    for template_file in "$templates_dir"/Dockerfile-*; do
        [[ -f "$template_file" ]] || continue
        
        local template_name=$(basename "$template_file" | sed 's/Dockerfile-//')
        local language=$(echo "$template_name" | sed 's/-.*$//')
        ((total_templates++))
        
        # Always keep the latest template for each language
        local latest=$(grep "^$language:" "$temp_file" | sort -t: -k3 -nr | head -1 | cut -d: -f2)
        if [[ "$latest" == "$template_name" ]]; then
            echo "🔒 Keeping latest: $template_name"
            ((kept_count++))
            continue
        fi
        
        # Check if template has been used recently
        local last_used=$(grep "^$template_name:" "$usage_file" 2>/dev/null | tail -1 | cut -d: -f2)
        
        if [[ -z "$last_used" ]]; then
            # Never used, check file age instead
            local file_age=$(stat -f %B "$template_file" 2>/dev/null || stat -c %Y "$template_file" 2>/dev/null || echo 0)
            if [[ $file_age -lt $threshold_date ]]; then
                echo "🗑️  Removing unused: $template_name (created >$days_threshold days ago, never used)"
                rm "$template_file"
                ((removed_count++))
            else
                echo "⏳ Keeping recent: $template_name (created recently, not yet used)"
                ((kept_count++))
            fi
        elif [[ $last_used -lt $threshold_date ]]; then
            echo "🗑️  Removing old: $template_name (last used >$days_threshold days ago)"
            rm "$template_file"
            ((removed_count++))
        else
            echo "✅ Keeping active: $template_name (used recently)"
            ((kept_count++))
        fi
    done
    
    local language_count=$(cut -d: -f1 "$temp_file" | sort -u | wc -l)
    rm "$temp_file"
    
    echo ""
    echo "📊 Pruning Summary:"
    echo "   Total templates: $total_templates"
    echo "   Removed: $removed_count"
    echo "   Kept: $kept_count"
    echo "   Languages with templates: $language_count"
    
    if [[ $removed_count -gt 0 ]]; then
        echo ""
        echo "✅ Template cleanup complete! Freed up space by removing $removed_count old templates."
        echo "💡 Run 'dev templates update' to recreate current versions if needed."
    else
        echo ""
        echo "✨ No templates needed removal - all are recent, active, or latest versions!"
    fi
}

function cleanup_unused_templates() {
    local days="${1:-60}"
    echo "🧹 Cleaning up templates unused for $days+ days..."
    echo ""
    
    local templates_dir="$TEMPLATES_DIR"
    local usage_file="$HOME/.dev-envs/template_usage.log"
    local current_date=$(date +%s)
    local threshold_date=$((current_date - days * 86400))
    
    if [[ ! -f "$usage_file" ]]; then
        echo "📝 No usage tracking file found - analyzing by file age instead"
        echo ""
    fi
    
    # Find latest templates per language to protect them
    local temp_file=$(mktemp)
    for template_file in "$templates_dir"/Dockerfile-*; do
        [[ -f "$template_file" ]] || continue
        local template_name=$(basename "$template_file" | sed 's/Dockerfile-//')
        local language=$(echo "$template_name" | sed 's/-.*$//')
        local file_time=$(stat -f %B "$template_file" 2>/dev/null || stat -c %Y "$template_file" 2>/dev/null || echo 0)
        
        echo "$language:$template_name:$file_time" >> "$temp_file"
    done
    
    local removed_count=0
    
    # Show what would be removed
    echo "🔍 Templates that would be removed:"
    for template_file in "$templates_dir"/Dockerfile-*; do
        [[ -f "$template_file" ]] || continue
        
        local template_name=$(basename "$template_file" | sed 's/Dockerfile-//')
        local language=$(echo "$template_name" | sed 's/-.*$//')
        local should_remove=false
        
        # Never remove the latest template for each language
        local latest_for_lang=$(grep "^$language:" "$temp_file" | sort -t: -k3 -nr | head -1 | cut -d: -f2)
        if [[ "$latest_for_lang" == "$template_name" ]]; then
            continue
        fi
        
        if [[ -f "$usage_file" ]]; then
            local last_used=$(grep "^$template_name:" "$usage_file" 2>/dev/null | tail -1 | cut -d: -f2)
            if [[ -n "$last_used" && $last_used -lt $threshold_date ]]; then
                should_remove=true
            elif [[ -z "$last_used" ]]; then
                local file_age=$(stat -f %B "$template_file" 2>/dev/null || stat -c %Y "$template_file" 2>/dev/null || echo 0)
                if [[ $file_age -lt $threshold_date ]]; then
                    should_remove=true
                fi
            fi
        else
            local file_age=$(stat -f %B "$template_file" 2>/dev/null || stat -c %Y "$template_file" 2>/dev/null || echo 0)
            if [[ $file_age -lt $threshold_date ]]; then
                should_remove=true
            fi
        fi
        
        if [[ "$should_remove" == "true" ]]; then
            local latest=$(grep "^$language:" "$temp_file" | sort -t: -k3 -nr | head -1 | cut -d: -f2)
            echo "   🗑️  $template_name (keeping latest: $latest)"
            ((removed_count++))
        fi
    done
    
    if [[ $removed_count -eq 0 ]]; then
        echo "   ✨ No old templates need cleanup!"
        echo "   💡 All templates are either recent, in use, or the latest version of their language."
        return
    fi
    
    echo ""
    echo "⚠️  This will remove $removed_count old template version(s)."
    echo "   Latest templates for each language will be preserved."
    if [[ "$AUTO_YES" == "true" ]]; then
        echo "Auto-confirming cleanup (--yes flag set)"
    else
        read -p "Continue? (y/N) " -n 1 -r
        echo
        
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Cleanup cancelled."
            return
        fi
    fi
    
    # Actually remove them
    removed_count=0
    for template_file in "$templates_dir"/Dockerfile-*; do
        [[ -f "$template_file" ]] || continue
        
        local template_name=$(basename "$template_file" | sed 's/Dockerfile-//')
        local language=$(echo "$template_name" | sed 's/-.*$//')
        local should_remove=false
        
        # Never remove the latest template for each language
        local latest_for_lang=$(grep "^$language:" "$temp_file" | sort -t: -k3 -nr | head -1 | cut -d: -f2)
        if [[ "$latest_for_lang" == "$template_name" ]]; then
            continue
        fi
        
        if [[ -f "$usage_file" ]]; then
            local last_used=$(grep "^$template_name:" "$usage_file" 2>/dev/null | tail -1 | cut -d: -f2)
            if [[ -n "$last_used" && $last_used -lt $threshold_date ]]; then
                should_remove=true
            elif [[ -z "$last_used" ]]; then
                local file_age=$(stat -f %B "$template_file" 2>/dev/null || stat -c %Y "$template_file" 2>/dev/null || echo 0)
                if [[ $file_age -lt $threshold_date ]]; then
                    should_remove=true
                fi
            fi
        else
            local file_age=$(stat -f %B "$template_file" 2>/dev/null || stat -c %Y "$template_file" 2>/dev/null || echo 0)
            if [[ $file_age -lt $threshold_date ]]; then
                should_remove=true
            fi
        fi
        
        if [[ "$should_remove" == "true" ]]; then
            echo "🗑️  Removing: $template_name"
            rm "$template_file"
            ((removed_count++))
        fi
    done
    
    echo ""
    echo "✅ Cleanup complete! Removed $removed_count old template versions."
    echo "💡 Latest version of each language preserved for future use."
}

function show_template_stats() {
    echo "📊 Template Statistics"
    echo ""
    
    local templates_dir="$TEMPLATES_DIR"
    local usage_file="$HOME/.dev-envs/template_usage.log"
    
    if [[ ! -d "$templates_dir" ]]; then
        echo "❌ Templates directory not found: $templates_dir"
        return 1
    fi
    
    # Get template information using a simpler approach
    local total_templates=0
    local temp_file=$(mktemp)
    
    # Create a temporary file with language data
    for template_file in "$templates_dir"/Dockerfile-*; do
        [[ -f "$template_file" ]] || continue
        
        local template_name=$(basename "$template_file" | sed 's/Dockerfile-//')
        local language=$(echo "$template_name" | sed 's/-.*$//')
        local file_time=$(stat -f %B "$template_file" 2>/dev/null || stat -c %Y "$template_file" 2>/dev/null || echo 0)
        
        echo "$language:$template_name:$file_time" >> "$temp_file"
        ((total_templates++))
    done
    
    echo "📦 Templates by Language:"
    printf "   %-12s %-8s %s\\n" "Language" "Count" "Latest Version"
    printf "   %-12s %-8s %s\\n" "--------" "-----" "--------------"
    
    # Process languages and show counts/latest
    for language in $(cut -d: -f1 "$temp_file" | sort -u); do
        local count=$(grep "^$language:" "$temp_file" | wc -l)
        local latest=$(grep "^$language:" "$temp_file" | sort -t: -k3 -nr | head -1 | cut -d: -f2)
        printf "   %-12s %-8s %s\\n" "$language" "$count" "$latest"
    done
    
    rm "$temp_file"
    
    echo ""
    echo "📈 Usage Statistics:"
    if [[ -f "$usage_file" ]]; then
        echo "   Total usage records: $(wc -l < "$usage_file" 2>/dev/null || echo 0)"
        
        # Show most used templates
        if [[ -s "$usage_file" ]]; then
            echo ""
            echo "   🔥 Most Used Templates (last 30 days):"
            local thirty_days_ago=$(($(date +%s) - 30 * 86400))
            
            awk -F: -v threshold="$thirty_days_ago" '
                $2 >= threshold { count[$1]++ }
                END {
                    for (template in count) {
                        print count[template], template
                    }
                }
            ' "$usage_file" | sort -nr | head -5 | while read count template; do
                printf "      %-3s uses: %s\\n" "$count" "$template"
            done
        fi
    else
        echo "   No usage tracking data available"
        echo "   (Usage tracking starts when templates are first used)"
    fi
    
    echo ""
    echo "💾 Storage Information:"
    local total_size=0
    if command -v du >/dev/null 2>&1; then
        total_size=$(du -sh "$templates_dir" 2>/dev/null | cut -f1 || echo "Unknown")
        echo "   Total template storage: $total_size"
    fi
    echo "   Total templates: $total_templates"
    
    # Show potential cleanup opportunities
    echo ""
    echo "🧹 Cleanup Opportunities:"
    local old_count=0
    local unused_count=0
    local thirty_days_ago=$(($(date +%s) - 30 * 86400))
    
    for template_file in "$templates_dir"/Dockerfile-*; do
        [[ -f "$template_file" ]] || continue
        
        local template_name=$(basename "$template_file" | sed 's/Dockerfile-//')
        local language=$(echo "$template_name" | sed 's/-.*$//')
        local file_age=$(stat -f %B "$template_file" 2>/dev/null || stat -c %Y "$template_file" 2>/dev/null || echo 0)
        
        # Check if old
        if [[ $file_age -lt $thirty_days_ago ]]; then
            ((old_count++))
        fi
        
        # Check if unused
        if [[ -f "$usage_file" ]]; then
            if ! grep -q "^$template_name:" "$usage_file"; then
                ((unused_count++))
            fi
        fi
    done
    
    if [[ $old_count -gt 0 || $unused_count -gt 0 ]]; then
        [[ $old_count -gt 0 ]] && echo "   📅 $old_count templates older than 30 days (excluding latest versions)"
        [[ $unused_count -gt 0 ]] && echo "   🚫 $unused_count templates never used"
        echo ""
        echo "💡 Run 'dev templates prune' for smart cleanup"
    else
        echo "   ✨ All templates are recent or actively used!"
    fi
}

# ==============================================================================
# MAIN EXECUTION
# ==============================================================================

# Initialize default values
DOCKERFILE="Dockerfile"
COMMAND="run"
CUSTOM_TAG=""
CUSTOM_NAME=""
AUTO_YES=false
TARGET_PLATFORM=""

# Process command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            ;;
        list)
            list_templates
            ;;
        templates)
            case "$2" in
                --help|-h)
                    show_command_help "templates"
                    exit 0
                    ;;
                update)
                    update_templates
                    exit 0
                    ;;
                check)
                    check_template_updates
                    exit 0
                    ;;
                prune)
                    prune_old_templates
                    exit 0
                    ;;
                cleanup)
                    # Handle optional days parameter and --yes flag
                    days="$3"
                    shift 3  # Remove 'templates', 'cleanup', and days
                    while [[ $# -gt 0 ]]; do
                        case $1 in
                            --yes|-y)
                                AUTO_YES=true
                                shift
                                ;;
                            *)
                                echo "❌ Error: Unknown flag for 'templates cleanup': $1"
                                exit 1
                                ;;
                        esac
                    done
                    cleanup_unused_templates "$days"
                    exit 0
                    ;;
                stats)
                    show_template_stats
                    exit 0
                    ;;
                *)
                    echo "❌ Error: Unknown templates subcommand '$2'"
                    echo "Available: update, check, prune, cleanup, stats"
                    exit 1
                    ;;
            esac
            ;;
        config)
            case "$2" in
                --help|-h)
                    show_command_help "config"
                    exit 0
                    ;;
                *)
                    shift 1  # Remove 'config'
                    # Parse config subcommand and flags
                    subcommand="$1"
                    shift 1
                    while [[ $# -gt 0 ]]; do
                        case $1 in
                            --yes|-y)
                                AUTO_YES=true
                                shift
                                ;;
                            *)
                                echo "❌ Error: Unknown flag for 'config' command: $1"
                                exit 1
                                ;;
                        esac
                    done
                    handle_config_command "$subcommand"
                    ;;
            esac
            ;;
        new)
            # Parse flags first to handle cases like "dev new --yes"
            init_project=false
            language=""
            shift 1  # Remove 'new'
            
            # Process all arguments
            while [[ $# -gt 0 ]]; do
                case $1 in
                    --help|-h)
                        show_command_help "new"
                        exit 0
                        ;;
                    --init)
                        init_project=true
                        shift
                        ;;
                    --yes|-y)
                        AUTO_YES=true
                        shift
                        ;;
                    -*)
                        echo "❌ Error: Unknown flag for 'new' command: $1"
                        exit 1
                        ;;
                    *)
                        if [[ -z "$language" ]]; then
                            language="$1"
                        else
                            echo "❌ Error: Multiple language arguments provided: $language and $1"
                            exit 1
                        fi
                        shift
                        ;;
                esac
            done
            
            # If no language specified, auto-detect
            if [[ -z "$language" ]]; then
                detection_result=$(detect_project_type)
                detected_lang=$(echo "$detection_result" | cut -d: -f1)
                detected_version=$(echo "$detection_result" | cut -d: -f2)
                confidence=$(echo "$detection_result" | cut -d: -f3)
                
                if [[ -n "$detected_lang" ]]; then
                    current_arch=$(detect_architecture)
                    suggested_template="$detected_lang"
                    
                    # Add version if detected and available, otherwise find best match
                    if [[ -n "$detected_version" ]]; then
                        # Try exact match first
                        if [[ -f "$TEMPLATES_DIR/Dockerfile-$detected_lang-$detected_version" ]]; then
                            suggested_template="$detected_lang-$detected_version"
                        else
                            # Try major.minor match (e.g., 3.12.0 -> 3.12)
                            major_minor=$(echo "$detected_version" | cut -d. -f1,2)
                            if [[ -f "$TEMPLATES_DIR/Dockerfile-$detected_lang-$major_minor" ]]; then
                                suggested_template="$detected_lang-$major_minor"
                            else
                                # Fall back to latest available
                                latest_template=$(ls "$TEMPLATES_DIR"/Dockerfile-"$detected_lang"-* 2>/dev/null | \
                                    sed "s/.*Dockerfile-$detected_lang-//" | \
                                    sort -V | tail -1)
                                if [[ -n "$latest_template" ]]; then
                                    suggested_template="$detected_lang-$latest_template"
                                fi
                            fi
                        fi
                    else
                        # Find the latest version available locally
                        latest_template=$(ls "$TEMPLATES_DIR"/Dockerfile-"$detected_lang"-* 2>/dev/null | \
                            sed "s/.*Dockerfile-$detected_lang-//" | \
                            sort -V | tail -1)
                        if [[ -n "$latest_template" ]]; then
                            suggested_template="$detected_lang-$latest_template"
                        fi
                    fi
                    
                    echo "🔍 Project Detection Results:"
                    echo "   Language: $detected_lang"
                    [[ -n "$detected_version" ]] && echo "   Version: $detected_version"
                    echo "   Architecture: $current_arch"
                    echo "   Confidence: $confidence"
                    echo ""
                    echo "💡 Suggested template: $suggested_template"
                    
                    if [[ "$AUTO_YES" == "true" ]]; then
                        echo "Auto-confirming suggestion (--yes flag set)"
                        create_from_template "$suggested_template" "$init_project" "$TARGET_PLATFORM"
                    else
                        echo -n "Use this template? (Y/n): "
                        read -r response
                        if [[ -z "$response" ]] || [[ "$response" =~ ^[Yy]$ ]]; then
                            create_from_template "$suggested_template" "$init_project" "$TARGET_PLATFORM"
                        else
                            echo "Template creation cancelled."
                            echo "Use 'dev list' to see available options or 'dev new <language>' to specify manually."
                            exit 0
                        fi
                    fi
                else
                    echo "🔍 No project files detected in current directory."
                    echo "Use 'dev new <language>' to create a template manually."
                    echo "Available languages: python, node, golang, rust, java, php, bash"
                    echo "Example: dev new python-3.13 --init"
                    exit 1
                fi
            else
                # Language specified manually
                create_from_template "$language" "$init_project" "$TARGET_PLATFORM"
            fi
            ;;
        -f|--file)
            DOCKERFILE="$2"
            shift 2
            ;;
        -t|--tag)
            CUSTOM_TAG="$2"
            shift 2
            ;;
        -n|--name)
            CUSTOM_NAME="$2"
            shift 2
            ;;
        -y|--yes)
            AUTO_YES=true
            shift
            ;;
        --platform)
            TARGET_PLATFORM="$2"
            shift 2
            ;;
        run|build|clean|shell)
            COMMAND="$1"
            shift
            ;;
        help)
            if [[ -n "$2" ]]; then
                show_command_help "$2"
            else
                usage
                echo ""
                echo "Available help topics:"
                echo "  $(basename "$0") help new           # Template creation help"
                echo "  $(basename "$0") help config        # Configuration help"
                echo "  $(basename "$0") help templates     # Template management help"
                echo "  $(basename "$0") help env           # Environment management help"
                echo "  $(basename "$0") arch               # Architecture and platform info"
                echo "  $(basename "$0") troubleshoot       # Troubleshooting guide"
            fi
            exit 0
            ;;
        troubleshoot)
            show_command_help "troubleshoot"
            exit 0
            ;;
        arch|architecture)
            case "$2" in
                --help|-h)
                    show_command_help "arch"
                    exit 0
                    ;;
                *)
                    echo "💻 Architecture Information:"
                    echo "   Host architecture: $(detect_architecture)"
                    echo "   Default platform: linux/$(detect_architecture)"
                    echo ""
                    echo "Supported platforms:"
                    echo "   linux/amd64    - Intel/AMD 64-bit (x86_64)"
                    echo "   linux/arm64    - ARM 64-bit (Apple Silicon, ARM servers)"
                    echo ""
                    echo "Usage:"
                    echo "   $(basename "$0") --platform linux/arm64    # Force ARM64 build"
                    echo "   $(basename "$0") --platform linux/amd64    # Force AMD64 build"
                    echo "   $(basename "$0")                          # Auto-detect (recommended)"
                    exit 0
                    ;;
            esac
            ;;
        env)
            # Pass all remaining arguments to handle_env_command
            shift 1  # Remove 'env'
            handle_env_command "$@"
            exit 0
            ;;
        *)
            echo "❌ Error: Unknown option '$1'"
            echo "Available commands: run, shell, build, clean, new, list, config, templates, env, help, troubleshoot, arch"
            echo "Use --help for usage information or 'help <command>' for command-specific help."
            exit 1
            ;;
    esac
done

# --- Load Configuration ---
load_config

# --- Validate Requirements ---
if [[ "$COMMAND" != "clean" ]]; then
    if [ ! -f "$DOCKERFILE" ]; then
        echo "❌ Error: No Dockerfile found at '$DOCKERFILE'"
        echo ""
        echo "💡 Suggestions:"
        echo "   • Create from template: '$(basename "$0") new <language>'"
        echo "   • Use different file: '$(basename "$0") -f /path/to/Dockerfile'"
        echo "   • See available templates: '$(basename "$0") list'"
        echo "   • Get help: '$(basename "$0") help new'"
        exit 1
    fi
fi

# --- Generate Names ---
PROJECT_NAME=$(basename "$(pwd)" | tr '[:upper:]' '[:lower:]')
IMAGE_NAME="${CUSTOM_TAG:-${CONTAINER_PREFIX}-img-${PROJECT_NAME}}"
CONTAINER_NAME="${CUSTOM_NAME:-${CONTAINER_PREFIX}-ctn-${PROJECT_NAME}}"

# --- Main Logic ---
case $COMMAND in
    run)
        echo "🚀 Preparing isolated container for '$PROJECT_NAME'..."
        ensure_vm_running
        platform_flag=$(get_platform_flag "$TARGET_PLATFORM")
        build_image "$platform_flag"
        cleanup_existing_container
        
        # Build enhanced container options
        volume_mounts=$(get_common_volume_mounts)
        ssh_mounts=$(get_ssh_key_mounts)
        port_forwards=$(build_port_forwards)
        
        echo "🔧 Enhanced developer experience:"
        if [[ -n "$port_forwards" ]]; then
            echo "   -> Port forwarding enabled for detected services"
        fi
        if [[ -n "$ssh_mounts" ]]; then
            echo "   -> SSH keys mounted for git authentication"
        fi
        echo "   -> Git configuration mounted for consistent commits"
        echo ""
        echo "✅ Connecting to container. Your project folder is at '/workspace'."
        
        orb -m "$VM_NAME" sudo docker run -it --rm \
            $volume_mounts \
            $ssh_mounts \
            $port_forwards \
            --name "$CONTAINER_NAME" \
            "$IMAGE_NAME"
        ;;
    shell)
        echo "🐚 Opening interactive shell in '$PROJECT_NAME' container..."
        ensure_vm_running
        platform_flag=$(get_platform_flag "$TARGET_PLATFORM")
        build_image "$platform_flag"
        cleanup_existing_container
        
        # Build enhanced container options
        volume_mounts=$(get_common_volume_mounts)
        ssh_mounts=$(get_ssh_key_mounts)
        port_forwards=$(build_port_forwards)
        
        echo "🔧 Enhanced developer experience:"
        if [[ -n "$port_forwards" ]]; then
            echo "   -> Port forwarding enabled for detected services"
        fi
        if [[ -n "$ssh_mounts" ]]; then
            echo "   -> SSH keys mounted for git authentication"
        fi
        echo "   -> Git configuration mounted for consistent commits"
        echo ""
        echo "✅ Container ready. Your project folder is at '/workspace'."
        
        orb -m "$VM_NAME" sudo docker run -it --rm \
            $volume_mounts \
            $ssh_mounts \
            $port_forwards \
            --name "$CONTAINER_NAME" \
            "$IMAGE_NAME" bash
        ;;
    build)
        echo "🔨 Building container image for '$PROJECT_NAME'..."
        ensure_vm_running
        platform_flag=$(get_platform_flag "$TARGET_PLATFORM")
        build_image "$platform_flag"
        echo "✅ Image '$IMAGE_NAME' built successfully."
        ;;
        
    clean)
        echo "🧹 Cleaning up containers and images for '$PROJECT_NAME'..."
        ensure_vm_running
        cleanup_existing_container
        if orb -m "$VM_NAME" sudo docker images --format '{{.Repository}}' | grep -q "^${IMAGE_NAME}$"; then
            echo "   -> Removing image '$IMAGE_NAME'..."
            orb -m "$VM_NAME" sudo docker rmi "$IMAGE_NAME" >/dev/null 2>&1
        fi
        echo "✅ Cleanup complete."
        ;;
esac